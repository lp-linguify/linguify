import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { CheckCircle2, XCircle } from 'lucide-react';

// Provide default empty implementations to prevent undefined errors
export interface GrammarRule {
  title: string;
  explanation: string;
  examples: {
    base: string;
    transformed: string;
    explanation?: string;
  }[];
}

export interface ExerciseItem {
  base: string;
  correct: string;
  explanation?: string;
}

export interface GrammarLessonConfig {
  title: string;
  introduction: string[];
  rules: GrammarRule[];
  exercises: ExerciseItem[];
  additionalTips: string[];
}

// Default empty configuration to use as a fallback
const DEFAULT_CONFIG: GrammarLessonConfig = {
  title: "Grammar Lesson",
  introduction: ["No introduction available"],
  rules: [],
  exercises: [],
  additionalTips: ["No additional tips available"]
};

// Composant générique d'exercice interactif
const InteractiveExercise = ({ 
  exercises, 
  onExerciseComplete 
}: { 
  exercises: ExerciseItem[],
  onExerciseComplete?: (score: number) => void 
}) => {
  const [exerciseState, setExerciseState] = useState(
    exercises.length > 0 
      ? exercises.map(exercise => ({ ...exercise, userAnswer: '' }))
      : []
  );

  const handleAnswerChange = (index: number, value: string) => {
    const newExercises = [...exerciseState];
    newExercises[index].userAnswer = value;
    setExerciseState(newExercises);
  };

  const checkAnswer = (exercise: typeof exerciseState[0]) => {
    return exercise.userAnswer.trim().toLowerCase() === exercise.correct;
  };

  const calculateScore = () => {
    if (exerciseState.length === 0) return 0;
    
    const correctAnswers = exerciseState.filter(checkAnswer).length;
    const score = (correctAnswers / exerciseState.length) * 100;
    
    if (onExerciseComplete) {
      onExerciseComplete(score);
    }
    
    return score;
  };

  if (exerciseState.length === 0) {
    return null;
  }

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle>Interactive Exercise</CardTitle>
      </CardHeader>
      <CardContent>
        {exerciseState.map((exercise, index) => (
          <div key={index} className="mb-4 flex items-center space-x-4">
            <span className="font-medium w-20">{exercise.base}</span>
            <input
              type="text"
              value={exercise.userAnswer}
              onChange={(e) => handleAnswerChange(index, e.target.value)}
              placeholder="Your answer"
              className="border p-2 rounded flex-grow"
            />
            {exercise.userAnswer && (
              checkAnswer(exercise) ? (
                <CheckCircle2 className="text-green-500" />
              ) : (
                <XCircle className="text-red-500" />
              )
            )}
            {exercise.explanation && (
              <div className="text-sm text-gray-500 ml-2">
                {exercise.explanation}
              </div>
            )}
          </div>
        ))}
        <Button onClick={calculateScore} className="mt-4">
          Check Answers
        </Button>
      </CardContent>
    </Card>
  );
};

// Composant générique de leçon de grammaire
export default function GenericGrammarLesson({ 
  config 
}: { 
  config?: Partial<GrammarLessonConfig> 
}) {
  // Merge provided config with default config
  const safeConfig: GrammarLessonConfig = {
    title: config?.title || DEFAULT_CONFIG.title,
    introduction: config?.introduction || DEFAULT_CONFIG.introduction,
    rules: config?.rules || DEFAULT_CONFIG.rules,
    exercises: config?.exercises || DEFAULT_CONFIG.exercises,
    additionalTips: config?.additionalTips || DEFAULT_CONFIG.additionalTips
  };

  const [score, setScore] = useState<number | null>(null);

  const handleExerciseComplete = (newScore: number) => {
    setScore(newScore);
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">{safeConfig.title}</h1>
      
      {/* Introduction */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Introduction</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="list-disc pl-6 space-y-2 mt-2">
            {safeConfig.introduction.map((point, index) => (
              <li key={index}>{point}</li>
            ))}
          </ul>
        </CardContent>
      </Card>

      {/* Règles de grammaire */}
      {safeConfig.rules.length > 0 ? (
        safeConfig.rules.map((rule, index) => (
          <Card key={index} className="mb-6">
            <CardHeader>
              <CardTitle>{rule.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="mb-4">{rule.explanation}</p>
              {rule.examples.length > 0 && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {rule.examples.map((example, exIndex) => (
                    <div 
                      key={exIndex} 
                      className="bg-gray-100 p-3 rounded"
                    >
                      <div className="font-medium">Base : {example.base}</div>
                      <div className="text-blue-600">
                        Transformed : {example.transformed}
                      </div>
                      {example.explanation && (
                        <div className="text-sm text-gray-500 mt-1">
                          {example.explanation}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        ))
      ) : (
        <Card className="mb-6">
          <CardContent>
            <p>No grammar rules available for this lesson.</p>
          </CardContent>
        </Card>
      )}

      {/* Exercice interactif */}
      {safeConfig.exercises.length > 0 && (
        <InteractiveExercise 
          exercises={safeConfig.exercises}
          onExerciseComplete={handleExerciseComplete}
        />
      )}

      {/* Score */}
      {score !== null && (
        <Card className="mt-6">
          <CardContent className="p-4">
            <div className={`font-bold ${score >= 80 ? 'text-green-600' : 'text-red-600'}`}>
              Your Score: {score.toFixed(0)}%
            </div>
          </CardContent>
        </Card>
      )}

      {/* Conseils supplémentaires */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle>Additional Tips</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="list-disc pl-6 space-y-2">
            {safeConfig.additionalTips.map((tip, index) => (
              <li key={index}>{tip}</li>
            ))}
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}

// Exemple d'utilisation
export const PresentSimpleConfig: GrammarLessonConfig = {
  title: "Present Simple Tense in English",
  introduction: [
    "Used to describe habitual actions",
    "Expresses general truths",
    "Describes permanent states"
  ],
  rules: [
    {
      title: "Basic Formation",
      explanation: "Add -s to the verb for 3rd person singular (he/she/it)",
      examples: [
        { base: "play", transformed: "plays" },
        { base: "work", transformed: "works" }
      ]
    },
    {
      title: "Verbs ending in -ss, -sh, -ch, -x",
      explanation: "Add -es to the verb",
      examples: [
        { base: "wash", transformed: "washes" },
        { base: "watch", transformed: "watches" }
      ]
    }
  ],
  exercises: [
    { base: "play", correct: "plays" },
    { base: "wash", correct: "washes" },
    { base: "study", correct: "studies" }
  ],
  additionalTips: [
    "Remember the irregular verb 'to be'",
    "Practice regularly",
    "Pay attention to exceptions"
  ]
};