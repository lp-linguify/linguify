name: Deploy Linguify

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '.github/**'

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: '1.7.1'
      
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false
      
      - name: Install dependencies
        run: poetry install --no-dev
      
      - name: Collect static files
        run: |
          poetry run python manage.py collectstatic --noinput
        env:
          DJANGO_SETTINGS_MODULE: core.settings
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
      
      - name: Run migrations
        run: |
          poetry run python manage.py migrate
        env:
          DJANGO_SETTINGS_MODULE: core.settings
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
      
      - name: Deploy to server
        if: ${{ github.event.inputs.environment != 'production' || github.ref == 'refs/heads/main' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}/backend
            git pull
            source ${{ secrets.VENV_PATH }}/bin/activate
            poetry install --no-dev
            python manage.py collectstatic --noinput
            python manage.py migrate
            sudo systemctl restart linguify-backend.service

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_AUTH0_DOMAIN: ${{ secrets.NEXT_PUBLIC_AUTH0_DOMAIN }}
          NEXT_PUBLIC_AUTH0_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_AUTH0_CLIENT_ID }}
          NEXT_PUBLIC_AUTH0_AUDIENCE: ${{ secrets.NEXT_PUBLIC_AUTH0_AUDIENCE }}
      
      - name: Deploy to server
        if: ${{ github.event.inputs.environment != 'production' || github.ref == 'refs/heads/main' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}/frontend
            git pull
            npm ci
            npm run build
            pm2 restart linguify-frontend

  notify-deploy-success:
    needs: [deploy-backend, deploy-frontend]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Success notification
        run: echo "Deployment completed successfully!"

  notify-deploy-failure:
    needs: [deploy-backend, deploy-frontend]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Failure notification
        run: echo "Deployment failed. Check the logs for details."