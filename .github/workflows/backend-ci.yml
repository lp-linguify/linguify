name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:

jobs:
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db_linguify
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: '1.7.1'

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          poetry install
          poetry add --group dev pytest-cov
      
      - name: Run linting
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run migrations
        run: |
          poetry run python manage.py migrate
        env:
          DJANGO_SETTINGS_MODULE: core.settings
          DJANGO_SECRET_KEY: test_secret_key
          DB_NAME: test_db_linguify
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          AUTH0_DOMAIN: test.auth0.com
          AUTH0_CLIENT_ID: test_client_id
          AUTH0_CLIENT_SECRET: test_client_secret
          AUTH0_AUDIENCE: https://test-api
          TEST_MODE: 'True'
      
      - name: Run tests
        run: |
          poetry run python run_all_tests.py
        env:
          DJANGO_SETTINGS_MODULE: core.settings
          DJANGO_SECRET_KEY: test_secret_key
          DB_NAME: test_db_linguify
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          AUTH0_DOMAIN: test.auth0.com
          AUTH0_CLIENT_ID: test_client_id
          AUTH0_CLIENT_SECRET: test_client_secret
          AUTH0_AUDIENCE: https://test-api
          TEST_MODE: 'True'
      
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Backend Tests
          path: backend/junit-report.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-results
          path: |
            backend/junit-report.xml
            backend/coverage.xml
          retention-days: 7

  notify:
    name: Notify on failure
    needs: [test]
    if: failure()
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - name: Create issue on test failure
        uses: actions/github-script@v7
        with:
          script: |
            const workflowName = "Backend CI";
            const runId = "${{ github.run_id }}";
            const branch = "${{ github.ref_name }}";
            const repo = context.repo;
            const issueTitle = `ðŸš¨ CI Failed: ${workflowName} on ${branch}`;
            const issueBody = `The CI workflow **${workflowName}** failed on the \`${branch}\` branch.

            **Run URL**: [View Failed Run](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})

            **Time**: ${new Date().toISOString()}

            Please investigate the issue and fix the failing tests.`;

            await github.rest.issues.create({
              owner: repo.owner,
              repo: repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ["bug", "CI"]
            });