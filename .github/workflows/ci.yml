name: Linguify CI

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.ts'
      - '**/*.tsx'
      - '**/package.json'
      - '**/pyproject.toml'
      - 'backend/poetry.lock'
      - 'frontend/package-lock.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit security scan
        run: bandit -r apps/ -ll -ii

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_linguify
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_linguify
      DEBUG: 'True'
      SECRET_KEY: 'test-secret-key-for-ci'
      DJANGO_SETTINGS_MODULE: core.settings

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: '1.7.1'
      
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ./backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('./backend/poetry.lock') }}
      
      - name: Install dependencies
        run: poetry install
      
      - name: Run linting
        run: |
          poetry run python -m pip install flake8
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run all tests with coverage
        run: |
          poetry add pytest-cov
          poetry run python -m pytest run_all_tests.py --cov=apps --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false

  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --production

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm test

      - name: Build application
        run: npm run build

  notify-success:
    needs: [backend-security, backend-tests, frontend-security, frontend-tests]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Success notification
        run: echo "All tests and security scans passed successfully!"

  notify-failure:
    needs: [backend-security, backend-tests, frontend-security, frontend-tests]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Failure notification
        run: echo "Some tests or security scans have failed. Check the logs for details."