name: Linguify CI

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.ts'
      - '**/*.tsx'
      - '**/package.json'
      - '**/pyproject.toml'
      - 'backend/poetry.lock'
      - 'frontend/package-lock.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit security scan
        run: bandit -r apps/ -ll -ii

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: backend-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_linguify
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_linguify
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: test_linguify
      DB_HOST: localhost
      DB_PORT: 5432
      DEBUG: 'True'
      SECRET_KEY: 'test-secret-key-for-ci'
      DJANGO_SETTINGS_MODULE: core.settings
      TEST_MODE: 'True'

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: '1.7.1'
      
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ./backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('./backend/poetry.lock') }}
      
      - name: Install dependencies
        run: poetry install

      - name: Run escape sequence fix script
        run: |
          echo "Fixing invalid escape sequences in Python files"
          chmod +x scripts/fix_escapes.py
          poetry run python scripts/fix_escapes.py

      - name: Validate database connection
        run: |
          echo "Testing database connection with postgres user"
          poetry run python -c "
import psycopg2
import os
try:
    conn = psycopg2.connect(
        dbname=os.environ.get('DB_NAME', 'test_linguify'),
        user=os.environ.get('DB_USER', 'postgres'),
        password=os.environ.get('DB_PASSWORD', 'postgres'),
        host=os.environ.get('DB_HOST', 'localhost'),
        port=os.environ.get('DB_PORT', '5432')
    )
    print('Database connection successful')
    conn.close()
except Exception as e:
    print(f'Database connection error: {e}')
    exit(1)
"

      - name: Basic validation
        run: |
          poetry run python -m compileall .
          echo "Syntax check passed"

      - name: Verify Django settings
        run: |
          echo "Checking Django database configuration"
          poetry run python -c "
import os
os.environ['TEST_MODE'] = 'True'
os.environ['DJANGO_SETTINGS_MODULE'] = 'core.settings'
import django
django.setup()
from django.conf import settings
print(f'Django version: {django.__version__}')
print(f'TEST_MODE: {os.environ.get(\"TEST_MODE\")}')
print(f'Database engine: {settings.DATABASES[\"default\"][\"ENGINE\"]}')
print(f'Database name: {settings.DATABASES[\"default\"][\"NAME\"]}')
if 'USER' in settings.DATABASES['default']:
    print(f'Database user: {settings.DATABASES[\"default\"][\"USER\"]}')
"

      - name: Run simplified tests
        run: |
          poetry run python -c "import pytest; print(f'Pytest version: {pytest.__version__}')"
          echo "Running core tests only"
          TEST_MODE=True poetry run python -m pytest tests/test_database_config.py tests/test_core_simple.py -v

      # Désactivé temporairement jusqu'à ce que les tests soient plus stables
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: ./coverage.xml
      #     fail_ci_if_error: false

  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: frontend-security-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm security audit..."
          npm audit --production || echo "::warning::Security vulnerabilities found - please review them carefully"

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: frontend-tests-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm test || echo "Frontend tests failed or not configured, but continuing workflow"

      - name: Build application
        run: npm run build

  notify-completion:
    needs: [backend-security, backend-tests, frontend-security, frontend-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Status notification
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "Some jobs have failed but workflow continued. Check the logs for details."
          else
            echo "All jobs completed. Some warnings may exist in the logs."
          fi