name: Linguify Bug Detection

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to check'
        required: true
        default: 'develop'
        type: choice
        options:
          - develop
          - staging
          - main
      thorough_check:
        description: 'Run thorough checks (more time but better detection)'
        type: boolean
        default: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      has_changes: ${{ steps.filter.outputs.frontend == 'true' || steps.filter.outputs.backend == 'true' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}
      - name: Debug repo state
        run: |
          echo "Listing repository structure..."
          find . -type d -not -path "*/\.*" -not -path "*/node_modules/*" -maxdepth 3
          echo ""
          echo "Git statut information"
          git status
          echo ""
          echo "recent commits"
          git log --online -n 5
          echo "Current branch: ${{ github.ref_name }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Inputs: ${{ toJson(github.event.inputs) }}"
          echo "Changed files:"
          git diff --name-only HEAD~1 HEAD || true
      
      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: 'csv'
          filters: |
            frontend:
              - 'frontend/**'
              - 'src/**'
              - 'public/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
            backend:
              - 'backend/**'
              - 'backend/apps/**'
              - 'backend/core/**'
              - '**/*.py'
              - 'requirements.txt'
      - name: Debug outputs
        run: |
          echo "Frontend changes: ${{ steps.filter.outputs.frontend }}"
          echo "Frontend files: ${{ steps.filter.outputs.frontend_files }}"
          echo "Backend changes: ${{ steps.filter.outputs.backend }}"
          echo "Backend files: ${{ steps.filter.outputs.backend_files }}"
          echo "Has changes: ${{ steps.filter.outputs.frontend == 'true' || steps.filter.outputs.backend == 'true' || github.event_name == 'workflow_dispatch' }}"        

  code-quality:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch' }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install frontend dependencies
        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
        run: |
          if [ -f package.json ]; then
            npm ci
          elif [ -f frontend/package.json ]; then
            cd frontend && npm ci
          fi
      
      - name: Run ESLint
        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
        run: |
          if [ -f package.json ]; then
            npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings=0 || echo "::warning::ESLint issues found"
          elif [ -f frontend/package.json ]; then
            cd frontend && npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings=0 || echo "::warning::ESLint issues found"
          fi
      
      - name: Check TypeScript types
        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
        run: |
          if [ -f tsconfig.json ]; then
            npx tsc --noEmit || echo "::warning::TypeScript type issues found"
          elif [ -f frontend/tsconfig.json ]; then
            cd frontend && npx tsc --noEmit || echo "::warning::TypeScript type issues found"
          fi
      
      - name: Set up Python
        if: ${{ needs.detect-changes.outputs.backend == 'true' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Python linting tools
        if: ${{ needs.detect-changes.outputs.backend == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pylint
      
      - name: Run Python linters
        if: ${{ needs.detect-changes.outputs.backend == 'true' }}
        run: |
          if [ -d backend ]; then
            cd backend
            # Run Flake8 for basic errors
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,migrations
            # Run Black to check formatting
            black --check . || echo "::warning::Code formatting issues found"
            # Run Pylint for more thorough checking if requested
            if [[ "${{ inputs.thorough_check }}" == "true" ]]; then
              pylint --disable=C0111,R0903,C0103 $(find . -name "*.py" -not -path "*/migrations/*" -not -path "*/venv/*") || echo "::warning::Pylint issues found"
            fi
          fi

  test-execution:
    needs: [detect-changes, code-quality]
    if: ${{ needs.detect-changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install frontend dependencies
        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
        run: |
          if [ -f package.json ]; then
            npm ci
          elif [ -f frontend/package.json ]; then
            cd frontend && npm ci
          fi
      
      - name: Run frontend tests
        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
        run: |
          if [ -f package.json ]; then
            npm test -- --watchAll=false || echo "::warning::Some frontend tests failed"
          elif [ -f frontend/package.json ]; then
            cd frontend && npm test -- --watchAll=false || echo "::warning::Some frontend tests failed"
          fi
      
      - name: Set up Python
        if: ${{ needs.detect-changes.outputs.backend == 'true' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install backend dependencies
        if: ${{ needs.detect-changes.outputs.backend == 'true' }}
        run: |
          if [ -f backend/requirements.txt ]; then
            cd backend
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          elif [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          fi
      
      - name: Run backend tests
        if: ${{ needs.detect-changes.outputs.backend == 'true' }}
        run: |
          if [ -f backend/manage.py ]; then
            cd backend
            python manage.py test || echo "::warning::Some backend tests failed"
          elif [ -f manage.py ]; then
            python manage.py test || echo "::warning::Some backend tests failed"
          elif [ -d backend ]; then
            cd backend
            python -m pytest || echo "::warning::Some backend tests failed"
          else
            python -m pytest || echo "::warning::Some backend tests failed"
          fi

  bug-scan:
    needs: [detect-changes, code-quality]
    if: ${{ needs.detect-changes.outputs.has_changes == 'true' && (github.event_name == 'push' || inputs.thorough_check == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Run CodeQL analysis for JavaScript/TypeScript
        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      
      - name: Run CodeQL analysis for Python
        if: ${{ needs.detect-changes.outputs.backend == 'true' }}
        uses: github/codeql-action/init@v2
        with:
          languages: python
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Look for common bugs in recent changes
        run: |
          # Get all modified files in this push or PR
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$FILES"
          
          # Look for common bugs in JavaScript/TypeScript files
          JS_TS_FILES=$(echo "$FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)
          if [[ ! -z "$JS_TS_FILES" ]]; then
            echo "Checking JavaScript/TypeScript files for common bugs..."
            echo "$JS_TS_FILES" | xargs -I{} grep -l "console.log" {} || true
            echo "$JS_TS_FILES" | xargs -I{} grep -l "debugger" {} || true
            echo "$JS_TS_FILES" | xargs -I{} grep -l "TODO" {} || true
          fi
          
          # Look for common bugs in Python files
          PY_FILES=$(echo "$FILES" | grep -E '\.py$' || true)
          if [[ ! -z "$PY_FILES" ]]; then
            echo "Checking Python files for common bugs..."
            echo "$PY_FILES" | xargs -I{} grep -l "import pdb" {} || true
            echo "$PY_FILES" | xargs -I{} grep -l "print(" {} || true
            echo "$PY_FILES" | xargs -I{} grep -l "# FIXME" {} || true
          fi

  create-summary:
    needs: [code-quality, test-execution, bug-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate job summary
        run: |
          echo "# Linguify Bug Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Triggered by: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test-execution.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.bug-scan.result }}" != "skipped" ]]; then
            echo "| Bug Scan | ${{ needs.bug-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.test-execution.result }}" == "success" && \
                ("${{ needs.bug-scan.result }}" == "success" || "${{ needs.bug-scan.result }}" == "skipped") ]]; then
            echo "✅ **No bugs detected in this run**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Potential issues detected - please check the job logs for details**" >> $GITHUB_STEP_SUMMARY
          fi
     
          

          
      - name: Notify on failure
        if: |
            always() &&
            (needs.code-quality.result != 'success' || 
            needs.test-execution.result != 'success' || 
            (needs.bug-scan.result != 'success' && needs.bug-scan.result != 'skipped'))
        # Utiliser continue-on-error pour éviter l'échec si le webhook n'est pas configuré
        continue-on-error: true
        uses: rtCamp/action-slack-notify@v2
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_CHANNEL: ci-alerts
            SLACK_COLOR: danger
            SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
            SLACK_TITLE: Bug Detection Alert
            SLACK_MESSAGE: |
                Potential bugs detected in *${{ github.repository }}* on branch *${{ github.ref_name }}*
                
                *Code Quality:* ${{ needs.code-quality.result == 'success' && '✅' || '❌' }}
                *Tests:* ${{ needs.test-execution.result == 'success' && '✅' || '❌' }}
                *Bug Scan:* ${{ needs.bug-scan.result == 'success' && '✅' || needs.bug-scan.result == 'skipped' && '➖' || '❌' }}
                
                <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View details>