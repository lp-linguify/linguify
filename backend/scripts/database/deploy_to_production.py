#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de d√©ploiement s√©lectif vers la production Supabase
Permet de pousser des donn√©es sp√©cifiques (apps, cours, etc.) depuis le d√©veloppement vers la production
"""

import os
import sys
import django
import json
from datetime import datetime
import subprocess

# Configuration Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.core.management import call_command
from django.core import serializers
from django.apps import apps


class ProductionDeployer:
    """Gestionnaire de d√©ploiement vers la production"""
    
    def __init__(self):
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.temp_dir = f"deploy_temp_{self.timestamp}"
        os.makedirs(self.temp_dir, exist_ok=True)
        
    def export_apps(self, app_ids=None):
        """Exporte les applications sp√©cifiques"""
        print("üì± Export des applications...")
        
        models_to_export = [
            'app_manager.App',
            'app_manager.AppDataRetention',
        ]
        
        if app_ids:
            # Export s√©lectif par IDs
            for model_name in models_to_export:
                filename = f"{self.temp_dir}/apps_{model_name.split('.')[1].lower()}.json"
                call_command(
                    'dumpdata', 
                    model_name,
                    '--pks', ','.join(map(str, app_ids)),
                    '--format=json',
                    '--indent=2',
                    '--output', filename
                )
                print(f"  ‚úÖ {model_name} export√© vers {filename}")
        else:
            # Export complet des apps
            filename = f"{self.temp_dir}/all_apps.json"
            call_command(
                'dumpdata',
                *models_to_export,
                '--format=json',
                '--indent=2',
                '--output', filename
            )
            print(f"  ‚úÖ Toutes les apps export√©es vers {filename}")
            
    def export_courses(self, course_ids=None, unit_ids=None):
        """Exporte les cours sp√©cifiques"""
        print("üìö Export des cours...")
        
        models_to_export = [
            'course.Course',
            'course.Unit', 
            'course.Lesson',
            'course.ContentLesson',
            'course.VocabularyList',
            'course.Numbers',
            'course.TheoryContent',
            'course.MultipleChoiceQuestion',
            'course.MatchingExercise',
            'course.SpeakingExercise',
            'course.TestRecap',
            'course.TestRecapQuestion',
            'course.TestRecapResult',
        ]
        
        if course_ids:
            for model_name in models_to_export:
                filename = f"{self.temp_dir}/courses_{model_name.split('.')[1].lower()}.json"
                try:
                    call_command(
                        'dumpdata',
                        model_name,
                        '--format=json',
                        '--indent=2',
                        '--output', filename
                    )
                    print(f"  ‚úÖ {model_name} export√©")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è Erreur {model_name}: {e}")
        else:
            filename = f"{self.temp_dir}/all_courses.json"
            call_command(
                'dumpdata',
                *models_to_export,
                '--format=json',
                '--indent=2',
                '--output', filename
            )
            print(f"  ‚úÖ Tous les cours export√©s vers {filename}")
            
    def export_custom_selection(self, models_and_filters):
        """
        Export personnalis√© avec filtres
        models_and_filters = {
            'app_manager.App': {'name__icontains': 'nouvelle_app'},
            'course.Course': {'title__icontains': 'nouveau_cours'}
        }
        """
        print("üéØ Export personnalis√©...")
        
        for model_name, filters in models_and_filters.items():
            try:
                app_label, model_class_name = model_name.split('.')
                model_class = apps.get_model(app_label, model_class_name)
                
                # Filtrer les objets
                objects = model_class.objects.filter(**filters)
                
                if objects.exists():
                    filename = f"{self.temp_dir}/custom_{model_class_name.lower()}.json"
                    
                    # Serialiser manuellement pour plus de contr√¥le
                    data = serializers.serialize('json', objects, indent=2)
                    
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(data)
                        
                    print(f"  ‚úÖ {model_name}: {objects.count()} objets export√©s")
                else:
                    print(f"  ‚ö†Ô∏è {model_name}: Aucun objet trouv√© avec les filtres {filters}")
                    
            except Exception as e:
                print(f"  ‚ùå Erreur {model_name}: {e}")
                
    def deploy_to_production(self):
        """D√©ploie les fichiers export√©s vers la production"""
        print("üöÄ D√©ploiement vers la production...")
        
        # Changer l'environnement vers production
        env = os.environ.copy()
        env['DJANGO_ENV'] = 'production'
        
        # Trouver tous les fichiers JSON √† d√©ployer
        json_files = [f for f in os.listdir(self.temp_dir) if f.endswith('.json')]
        
        if not json_files:
            print("  ‚ö†Ô∏è Aucun fichier √† d√©ployer trouv√©")
            return False
            
        print(f"  üìÅ Fichiers √† d√©ployer: {', '.join(json_files)}")
        
        # Confirmation de s√©curit√©
        response = input("  ‚ö†Ô∏è ATTENTION: D√©ploiement vers PRODUCTION. Continuer? (oui/non): ")
        if response.lower() not in ['oui', 'yes', 'y']:
            print("  ‚ùå D√©ploiement annul√©")
            return False
            
        # D√©ployer chaque fichier
        success_count = 0
        for json_file in json_files:
            filepath = os.path.join(self.temp_dir, json_file)
            
            try:
                print(f"  üì§ D√©ploiement de {json_file}...")
                
                result = subprocess.run([
                    sys.executable, 'manage.py', 'loaddata', filepath
                ], env=env, capture_output=True, text=True, cwd=os.path.dirname(os.path.dirname(self.temp_dir)))
                
                if result.returncode == 0:
                    print(f"    ‚úÖ {json_file} d√©ploy√© avec succ√®s")
                    success_count += 1
                else:
                    print(f"    ‚ùå Erreur {json_file}: {result.stderr}")
                    
            except Exception as e:
                print(f"    ‚ùå Exception {json_file}: {e}")
                
        print(f"  üìä R√©sultat: {success_count}/{len(json_files)} fichiers d√©ploy√©s")
        return success_count == len(json_files)
        
    def cleanup(self):
        """Nettoie les fichiers temporaires"""
        import shutil
        try:
            shutil.rmtree(self.temp_dir)
            print(f"üßπ Fichiers temporaires supprim√©s: {self.temp_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du nettoyage: {e}")


def main():
    """Menu principal interactif"""
    deployer = ProductionDeployer()
    
    try:
        print("üöÄ D√âPLOIEMENT VERS PRODUCTION SUPABASE")
        print("=" * 50)
        print()
        
        print("Options de d√©ploiement:")
        print("1. D√©ployer nouvelles applications")
        print("2. D√©ployer nouveaux cours")
        print("3. D√©ploiement personnalis√©")
        print("4. Quitter")
        print()
        
        choice = input("Votre choix (1-4): ").strip()
        
        if choice == "1":
            # D√©ploiement d'applications
            print("\nüì± D√âPLOIEMENT D'APPLICATIONS")
            print("Voulez-vous d√©ployer:")
            print("a. Toutes les nouvelles applications")
            print("b. Applications sp√©cifiques par ID")
            
            sub_choice = input("Votre choix (a/b): ").strip().lower()
            
            if sub_choice == "a":
                deployer.export_apps()
            elif sub_choice == "b":
                ids_input = input("IDs des applications (s√©par√©s par des virgules): ")
                app_ids = [int(id.strip()) for id in ids_input.split(',') if id.strip().isdigit()]
                deployer.export_apps(app_ids)
                
        elif choice == "2":
            # D√©ploiement de cours
            print("\nüìö D√âPLOIEMENT DE COURS")
            deployer.export_courses()
            
        elif choice == "3":
            # D√©ploiement personnalis√©
            print("\nüéØ D√âPLOIEMENT PERSONNALIS√â")
            print("Exemple: d√©ployer une app avec un nom sp√©cifique")
            
            app_name = input("Nom de l'application √† d√©ployer (ou ENTER pour passer): ").strip()
            course_name = input("Nom du cours √† d√©ployer (ou ENTER pour passer): ").strip()
            
            filters = {}
            if app_name:
                filters['app_manager.App'] = {'name__icontains': app_name}
            if course_name:
                filters['course.Course'] = {'title__icontains': course_name}
                
            if filters:
                deployer.export_custom_selection(filters)
            else:
                print("Aucun filtre sp√©cifi√©")
                return
                
        elif choice == "4":
            print("üëã Au revoir!")
            return
        else:
            print("‚ùå Choix invalide")
            return
            
        # Proc√©der au d√©ploiement
        if deployer.deploy_to_production():
            print("\nüéâ D√©ploiement termin√© avec succ√®s!")
        else:
            print("\n‚ö†Ô∏è D√©ploiement partiellement r√©ussi ou √©chou√©")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è D√©ploiement interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
    finally:
        deployer.cleanup()


if __name__ == "__main__":
    main()