#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Part of Linguify. See LICENSE file for full copyright and licensing details.

"""
Script pour synchroniser le blog de d√©veloppement vers production
"""

import os
import sys
import django
import json

# Configuration Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

def sync_blog_to_production():
    """Synchronise les donn√©es du blog de dev vers prod"""
    
    print("üîÑ SYNCHRONISATION DU BLOG VERS PRODUCTION")
    print("=" * 50)
    
    # √âtape 1: Export depuis d√©veloppement
    print("\nüì§ √âtape 1: Export depuis d√©veloppement...")
    os.environ['DJANGO_ENV'] = 'development'
    django.setup()
    
    from core.blog.models import BlogPost, Category, Tag
    from django.core import serializers
    
    # Exporter les donn√©es du blog
    blog_data = []
    
    # Categories
    categories = Category.objects.all()
    blog_data.extend(json.loads(serializers.serialize('json', categories)))
    print(f"‚úÖ {categories.count()} cat√©gories export√©es")
    
    # Tags  
    tags = Tag.objects.all()
    blog_data.extend(json.loads(serializers.serialize('json', tags)))
    print(f"‚úÖ {tags.count()} tags export√©s")
    
    # Articles
    posts = BlogPost.objects.all()
    blog_data.extend(json.loads(serializers.serialize('json', posts)))
    print(f"‚úÖ {posts.count()} articles export√©s")
    
    # Relations many-to-many
    for post in posts:
        for tag in post.tags.all():
            blog_data.append({
                'model': 'blog.blogpost_tags',
                'fields': {
                    'blogpost_id': post.id,
                    'tag_id': tag.id
                }
            })
    
    # Sauvegarde temporaire
    export_file = f"blog_export_{django.utils.timezone.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(export_file, 'w', encoding='utf-8') as f:
        json.dump(blog_data, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ Donn√©es sauv√©es dans: {export_file}")
    
    # √âtape 2: Import vers production
    print("\nüì• √âtape 2: Import vers production...")
    
    # R√©initialiser Django pour la production
    from django.apps import apps
    apps.populate()
    
    os.environ['DJANGO_ENV'] = 'production'
    
    # Red√©marrer Django
    import importlib
    from django.conf import settings
    importlib.reload(sys.modules['core.settings'])
    
    # V√©rifier la connexion production
    from django.db import connection
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
        print("‚úÖ Connexion √† Supabase √©tablie")
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† Supabase: {e}")
        return False
    
    # Importer les donn√©es
    try:
        from django.core.management import call_command
        from io import StringIO
        
        # Nettoyer les tables blog en production
        print("üóëÔ∏è  Nettoyage des tables blog en production...")
        BlogPost.objects.all().delete()
        Category.objects.all().delete() 
        Tag.objects.all().delete()
        print("‚úÖ Tables blog nettoy√©es")
        
        # Importer les donn√©es
        call_command('loaddata', export_file, verbosity=2)
        print("‚úÖ Donn√©es import√©es avec succ√®s")
        
        # V√©rification
        print(f"\nüìä V√©rification en production:")
        print(f"- Cat√©gories: {Category.objects.count()}")
        print(f"- Tags: {Tag.objects.count()}")
        print(f"- Articles: {BlogPost.objects.count()}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'import: {e}")
        return False
    finally:
        # Nettoyer le fichier temporaire
        if os.path.exists(export_file):
            os.remove(export_file)
            print(f"üßπ Fichier temporaire supprim√©: {export_file}")
    
    print("\nüéâ Synchronisation du blog termin√©e avec succ√®s!")
    return True

if __name__ == "__main__":
    sync_blog_to_production()