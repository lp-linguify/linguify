# Generated by Django 5.1.10 on 2025-06-22 03:35

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('community', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='activityfeed',
            options={'ordering': ['-created_at']},
        ),
        migrations.AlterModelOptions(
            name='group',
            options={'ordering': ['-created_at']},
        ),
        migrations.AddField(
            model_name='group',
            name='activity_level',
            field=models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10),
        ),
        migrations.AddField(
            model_name='group',
            name='group_type',
            field=models.CharField(choices=[('conversation', 'Conversation Practice'), ('grammar', 'Grammar Study'), ('vocabulary', 'Vocabulary Building'), ('reading', 'Reading Club'), ('writing', 'Writing Practice'), ('pronunciation', 'Pronunciation Practice'), ('culture', 'Cultural Exchange'), ('general', 'General Study')], default='general', max_length=20),
        ),
        migrations.AddField(
            model_name='group',
            name='is_private',
            field=models.BooleanField(default=False, help_text='Private groups require invitation'),
        ),
        migrations.AddField(
            model_name='group',
            name='language',
            field=models.CharField(choices=[('EN', 'English'), ('FR', 'French'), ('ES', 'Spanish'), ('DE', 'German'), ('IT', 'Italian'), ('PT', 'Portuguese'), ('NL', 'Dutch')], default='EN', help_text='Primary language for this group', max_length=10),
        ),
        migrations.AddField(
            model_name='group',
            name='level',
            field=models.CharField(choices=[('beginner', 'Beginner (A1-A2)'), ('intermediate', 'Intermediate (B1-B2)'), ('advanced', 'Advanced (C1-C2)'), ('mixed', 'Mixed Levels')], default='mixed', max_length=20),
        ),
        migrations.AddField(
            model_name='group',
            name='max_members',
            field=models.PositiveIntegerField(default=20, help_text='Maximum number of members'),
        ),
        migrations.AddField(
            model_name='group',
            name='moderators',
            field=models.ManyToManyField(blank=True, related_name='moderated_groups', to='community.profile'),
        ),
        migrations.AddField(
            model_name='group',
            name='native_speakers_only',
            field=models.BooleanField(default=False, help_text='Only allow native speakers'),
        ),
        migrations.AddField(
            model_name='group',
            name='requires_language_exchange',
            field=models.BooleanField(default=False, help_text='Members must offer language exchange'),
        ),
        migrations.AddField(
            model_name='group',
            name='rules',
            field=models.TextField(blank=True, help_text='Group rules and guidelines', null=True),
        ),
        migrations.AlterField(
            model_name='activityfeed',
            name='activity_type',
            field=models.CharField(choices=[('post', 'Post'), ('comment', 'Comment'), ('like', 'Like'), ('lesson_completed', 'Lesson Completed'), ('friend_added', 'Friend Added'), ('group_joined', 'Group Joined'), ('achievement', 'Achievement Earned'), ('language_exchange', 'Language Exchange Session'), ('study_session', 'Study Session')], max_length=50),
        ),
        migrations.CreateModel(
            name='LanguageExchangeSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_language', models.CharField(default='EN', help_text='Language being taught/practiced', max_length=10)),
                ('secondary_language', models.CharField(default='FR', help_text='Language being learned', max_length=10)),
                ('session_type', models.CharField(choices=[('conversation', 'Conversation Practice'), ('correction', 'Text Correction'), ('pronunciation', 'Pronunciation Help'), ('cultural', 'Cultural Exchange'), ('mixed', 'Mixed Practice')], default='conversation', max_length=20)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('session_notes', models.TextField(blank=True, help_text='Notes from the session')),
                ('teacher_rating', models.PositiveIntegerField(blank=True, help_text='Rating for the teacher (1-5)', null=True)),
                ('learner_rating', models.PositiveIntegerField(blank=True, help_text='Rating for the learner (1-5)', null=True)),
                ('participants', models.ManyToManyField(related_name='exchange_sessions', to='community.profile')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='StudySession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('scheduled_at', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=60)),
                ('max_participants', models.PositiveIntegerField(default=10)),
                ('topics', models.JSONField(default=list, help_text='List of topics to cover')),
                ('materials', models.JSONField(default=list, help_text='Study materials and resources')),
                ('is_cancelled', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_study_sessions', to='community.profile')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_sessions', to='community.group')),
                ('participants', models.ManyToManyField(blank=True, related_name='study_sessions', to='community.profile')),
            ],
            options={
                'ordering': ['scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='LanguagePartnerMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requester_teaches', models.CharField(default='EN', help_text='Language requester can teach', max_length=10)),
                ('requester_learns', models.CharField(default='FR', help_text='Language requester wants to learn', max_length=10)),
                ('partner_teaches', models.CharField(default='FR', help_text='Language partner can teach', max_length=10)),
                ('partner_learns', models.CharField(default='EN', help_text='Language partner wants to learn', max_length=10)),
                ('compatibility_score', models.PositiveIntegerField(default=0, help_text='Match quality score (0-100)')),
                ('is_mutual', models.BooleanField(default=False, help_text='Both users can help each other')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('active', 'Active'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_interaction', models.DateTimeField(auto_now=True)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partner_matches', to='community.profile')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partner_requests', to='community.profile')),
            ],
            options={
                'ordering': ['-compatibility_score', '-created_at'],
                'unique_together': {('requester', 'partner')},
            },
        ),
    ]
