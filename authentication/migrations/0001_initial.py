# Generated by Django 5.0.4 on 2024-05-16 20:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('language_id', models.AutoField(primary_key=True, serialize=False)),
                ('language_name', models.CharField(max_length=100, unique=True)),
                ('language_code', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LevelTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('A1', 'A1'), ('A2', 'A2'), ('B1', 'B1'), ('B2', 'B2'), ('C1', 'C1'), ('C2', 'C2')], default='A1', max_length=2, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('role', models.CharField(choices=[('CREATOR', 'Creator'), ('SUBSCRIBER', 'Subscriber')], default='SUBSCRIBER', max_length=30)),
                ('objectives', models.CharField(blank=True, choices=[('get_a_job', 'Get a job easily'), ('travel', 'Travel in a foreign country'), ('live_abroad', 'Live abroad for a while'), ('study_abroad', 'Study abroad'), ('improve_skills', 'Improve skills for work'), ('pass_exam', 'Pass an exam or test'), ('other', 'Other objective')], default='get_a_job', max_length=30, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('language_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='user_language_id', to='authentication.language')),
                ('learning_language', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='user_learning_language', to='authentication.language')),
                ('mother_language', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='user_mother_language', to='authentication.language')),
                ('level', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='authentication.leveltarget')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('user_feedback_id', models.AutoField(primary_key=True, serialize=False)),
                ('feedback_type', models.CharField(blank=True, choices=[('like', 'Like'), ('dislike', 'Dislike')], default='like', max_length=100, null=True)),
                ('feedback_content', models.TextField(blank=True, default='Great flashcard!', null=True)),
                ('feedback_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSetting',
            fields=[
                ('user_setting_id', models.AutoField(primary_key=True, serialize=False)),
                ('settings_theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], default='light', max_length=30)),
                ('settings_notifications', models.BooleanField(default=True)),
                ('settings_email_notifications', models.BooleanField(default=True)),
                ('settings_push_notifications', models.BooleanField(default=True)),
                ('settings_sound_notifications', models.BooleanField(default=True)),
                ('settings_language_notifications', models.BooleanField(default=True)),
                ('settings_flashcards_notifications', models.BooleanField(default=True)),
                ('settings_exercises_notifications', models.BooleanField(default=True)),
                ('settings_lessons_notifications', models.BooleanField(default=True)),
                ('settings_courses_notifications', models.BooleanField(default=True)),
                ('settings_groups_notifications', models.BooleanField(default=True)),
                ('settings_friends_notifications', models.BooleanField(default=True)),
                ('settings_messages_notifications', models.BooleanField(default=True)),
                ('settings_calls_notifications', models.BooleanField(default=True)),
                ('settings_video_notifications', models.BooleanField(default=True)),
                ('settings_audio_notifications', models.BooleanField(default=True)),
                ('settings_text_notifications', models.BooleanField(default=True)),
                ('settings_images_notifications', models.BooleanField(default=True)),
                ('settings_videos_notifications', models.BooleanField(default=True)),
                ('settings_audios_notifications', models.BooleanField(default=True)),
                ('settings_files_notifications', models.BooleanField(default=True)),
                ('settings_links_notifications', models.BooleanField(default=True)),
                ('settings_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings_language', to='authentication.language')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='settings',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_settings', to='authentication.usersetting'),
        ),
    ]
