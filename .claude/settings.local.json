{
  "permissions": {
    "allow": [
      "*",
      "Bash(find:*)",
      "Bash(python3 manage.py check:*)",
      "Bash(grep:*)",
      "Bash(python3:*)",
      "Bash(rm:*)",
      "Bash(python test_fixed_endpoint.py:*)",
      "Bash(rg:*)",
      "Bash(poetry run python manage.py showmigrations:*)",
      "Bash(poetry run python manage.py migrate:*)",
      "Bash(poetry run python manage.py dbshell:*)",
      "Bash(poetry run:*)",
      "Bash(poetry remove:*)",
      "Bash(poetry add:*)",
      "Bash(python:*)",
      "Bash(mv:*)",
      "Bash(npm run dev:*)",
      "Bash(npm install:*)",
      "Bash(poetry install:*)",
      "Bash(powershell.exe:*)",
      "Bash(ls:*)",
      "Bash(curl:*)",
      "Bash(cat:*)",
      "Bash(source:*)",
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(touch:*)",
      "Bash(./venv/Scripts/python.exe manage.py runserver:*)",
      "Bash(./linguify-bin scaffold:*)",
      "Bash(chmod:*)",
      "Bash(echo:*)",
      "Bash(./stop.sh:*)",
      "Bash(timeout:*)",
      "Bash(poetry show:*)",
      "Bash(./run.sh:*)",
      "Bash(mkdir:*)",
      "Bash(poetry env info:*)",
      "Bash(pkill:*)",
      "Bash(./clean-next.sh:*)",
      "Bash(bash:*)",
      "Bash(cp:*)",
      "Bash(node test-imports.js)",
      "Bash(true)",
      "Bash(cmd.exe:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run type-check:*)",
      "Bash(npx eslint:*)",
      "Bash(awk:*)",
      "Bash(sed:*)",
      "Bash(pip install:*)",
      "Bash(pip3 install:*)",
      "Bash(npm run lint)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git push:*)",
      "Bash(copy /mnt/c/Users/louis/WebstormProjects/linguify/frontend/src/app/\\(dashboard\\)/page.optimized.tsx /mnt/c/Users/louis/WebstormProjects/linguify/frontend/src/app/\\(dashboard\\)/page.tsx)",
      "Bash(npm start)",
      "Bash(npm run:*)",
      "Bash(gettext:*)",
      "Bash(msgfmt:*)",
      "Bash(wget:*)",
      "Bash(pip show:*)",
      "Bash(pip3 show:*)",
      "Bash(./venv/Scripts/python.exe test_email_rejection.py:*)",
      "Bash(./venv/Scripts/python.exe manage.py test core.jobs.tests.test_status_notifications -v 2 --settings=core.settings_test)",
      "Bash(./venv/Scripts/python.exe manage.py test core.jobs.tests.test_status_notifications.StatusNotificationTests.test_rejected_email_no_status_badge -v 2 --settings=core.settings_test)",
      "Bash(./venv/Scripts/python.exe manage.py test core.jobs.tests.test_status_notifications -v 1 --settings=core.settings_test)",
      "Bash(./venv/Scripts/python.exe manage.py test core.jobs.tests -v 2 --settings=core.settings_test)",
      "Bash(poetry search:*)",
      "Bash(poetry update:*)",
      "Bash(git stash:*)",
      "Bash(venv/Scripts/python.exe manage.py shell -c \"\nfrom public_web.utils import manifest_parser\n# Vider le cache du manifest parser\nmanifest_parser.clear_cache()\n# RÃ©cupÃ©rer les apps publiques\napps = manifest_parser.get_public_apps()\nprint('Apps publiques aprÃ¨s nettoyage:')\nfor app in apps:\n    print(f'Slug: {app[\\\"slug\\\"]}, Name: {app[\\\"name\\\"]}, Route: {app[\\\"route\\\"]}')\n\")",
      "Bash(venv/Scripts/python.exe manage.py:*)",
      "Bash(sudo -u postgres:*)",
      "Bash(export_clean_data.py )",
      "Bash(export_production_data.py )",
      "Bash(export_production_data_simple.py )",
      "Bash(export_simple_data.py )",
      "Bash(export_without_notifications.py )",
      "Bash(final_import_only.py )",
      "Bash(full_database_copy.py )",
      "Bash(import_clean_data.py )",
      "Bash(import_data_simple.py )",
      "Bash(import_essential_data.py )",
      "Bash(import_final_data.py )",
      "Bash(import_production_data.py )",
      "Bash(import_production_data_simple.py )",
      "Bash(import_simple_data.py )",
      "Bash(import_supabase_safe.ps1 )",
      "Bash(import_from_supabase.ps1 )",
      "Bash(import_from_supabase.sh )",
      "Bash(copy_all_supabase_data.py )",
      "Bash(copy_missing_data.py )",
      "Bash(clean_and_import.py )",
      "Bash(check_data_counts.py )",
      "Bash(setup_postgresql.sh)",
      "Bash(all_production_data.json )",
      "Bash(clean_and_import.py )",
      "Bash(copy_all_supabase_data.py )",
      "Bash(copy_missing_data.py )",
      "Bash(direct_sql_import.sql )",
      "Bash(export_clean_data.py )",
      "Bash(export_production_data.py )",
      "Bash(export_production_data_simple.py )",
      "Bash(export_simple_data.py )",
      "Bash(export_without_notifications.py )",
      "Bash(final_import_only.py )",
      "Bash(full_database_copy.py )",
      "Bash(import_clean_data.py )",
      "Bash(import_data_simple.py )",
      "Bash(import_essential_data.py )",
      "Bash(import_final_data.py )",
      "Bash(import_from_supabase.ps1 )",
      "Bash(import_from_supabase.sh )",
      "Bash(import_production_data.py )",
      "Bash(import_production_data_simple.py )",
      "Bash(import_simple_data.py )",
      "Bash(import_supabase_safe.ps1 )",
      "Bash(production_data.json )",
      "Bash(production_simple.json )",
      "Bash(test_dynamic_system.ps1 )",
      "Bash(test_dynamic_system.sh )",
      "Bash(test_fixes.ps1 )",
      "Bash(test_jobs_debug.py )",
      "Bash(test_new_architecture.py )",
      "Bash(test_seo_urls.py )",
      "Bash(test_settings.html)",
      "Bash(make:*)",
      "Bash(DJANGO_ENV=\"production\" poetry run python -c \"\nimport os, sys, django\nsys.path.append('.')\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\ndjango.setup()\nfrom app_manager.models import App\nprint('ðŸ“‹ Applications disponibles en production:')\nfor app in App.objects.all():\n    print(f'  - {app.display_name} (code: {app.code})')\nprint(f'Total: {App.objects.count()} applications')\n\")",
      "Bash(sudo service:*)",
      "Bash(DJANGO_ENV=\"production\" poetry run python -c \"\nimport os, sys\nsys.path.append('.')\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\nimport django\ndjango.setup()\nfrom course.models import Lesson, TheoryContent\nprint(f'Production - Lessons: {Lesson.objects.count()}, Theory: {TheoryContent.objects.count()}')\n\")",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(DJANGO_ENV=production poetry run python scripts/database/app_manager.py list)",
      "Bash(DJANGO_ENV=production poetry run python scripts/database/manifest_manager.py apply-manifest)",
      "Bash(CI=true GITHUB_ACTIONS=true poetry run python manage.py test tests apps.authentication.tests --settings=core.settings_test --keepdb --verbosity=1 --pattern=\"test_*.py\")",
      "Bash(DJANGO_ENV=production poetry run python manage.py loaddata /tmp/debug_export.json)",
      "Bash(convert:*)",
      "Bash(__NEW_LINE__ cp apps/chat/static/description/icon.png static/app-icons/chat.png)",
      "Bash(poetry:*)"
    ],
    "deny": []
  }
}